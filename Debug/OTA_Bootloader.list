
OTA_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001564  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080016ec  080016ec  000116ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001874  08001874  00011874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001878  08001878  00011878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  0800187c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  7 .bss          00000040  20000014  20000014  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000054  20000054  00020014  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .debug_info   000048d6  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000fe3  00000000  00000000  0002491a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000590  00000000  00000000  00025900  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004d8  00000000  00000000  00025e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002073  00000000  00000000  00026368  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001d9b  00000000  00000000  000283db  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002a176  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000015fc  00000000  00000000  0002a1f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080016d4 	.word	0x080016d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080016d4 	.word	0x080016d4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <WIFI_SendCmd>:
 *      Author: MahmoudH
 */

#include "WIFI.h"
/* timeout in ms */
uint8_t WIFI_SendCmd(uint8_t* cmd, uint8_t* expResp, uint32_t timeout){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	uint8_t	status 		= 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	77fb      	strb	r3, [r7, #31]
	uint8_t	data 		= 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	74fb      	strb	r3, [r7, #19]
	uint32_t compInd 	= 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
	uint32_t len        = strlen(expResp);
 8000a24:	68b8      	ldr	r0, [r7, #8]
 8000a26:	f7ff fbcf 	bl	80001c8 <strlen>
 8000a2a:	6178      	str	r0, [r7, #20]
	Uart_SendString(USART1,cmd);
 8000a2c:	68f9      	ldr	r1, [r7, #12]
 8000a2e:	481b      	ldr	r0, [pc, #108]	; (8000a9c <WIFI_SendCmd+0x90>)
 8000a30:	f000 fb28 	bl	8001084 <Uart_SendString>
	SysTick_Restart();
 8000a34:	f000 f976 	bl	8000d24 <SysTick_Restart>
	/*\r\nOK\r\n*/
	while(SysTick_GetTicks() < timeout && status == 0){
 8000a38:	e020      	b.n	8000a7c <WIFI_SendCmd+0x70>
		if(compInd < len){
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d216      	bcs.n	8000a70 <WIFI_SendCmd+0x64>
			if(Uart_ReceiveByte_Unblock(USART1,&data))
 8000a42:	f107 0313 	add.w	r3, r7, #19
 8000a46:	4619      	mov	r1, r3
 8000a48:	4814      	ldr	r0, [pc, #80]	; (8000a9c <WIFI_SendCmd+0x90>)
 8000a4a:	f000 fb38 	bl	80010be <Uart_ReceiveByte_Unblock>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d013      	beq.n	8000a7c <WIFI_SendCmd+0x70>
			{
				if(data == expResp[compInd]){
 8000a54:	68ba      	ldr	r2, [r7, #8]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	4413      	add	r3, r2
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	7cfb      	ldrb	r3, [r7, #19]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d103      	bne.n	8000a6a <WIFI_SendCmd+0x5e>
					compInd++;
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	3301      	adds	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	e008      	b.n	8000a7c <WIFI_SendCmd+0x70>
				}
				else{
					compInd = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61bb      	str	r3, [r7, #24]
 8000a6e:	e005      	b.n	8000a7c <WIFI_SendCmd+0x70>
				}
			}
		}
		else if(compInd == len){
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d101      	bne.n	8000a7c <WIFI_SendCmd+0x70>
			status = 1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	77fb      	strb	r3, [r7, #31]
	while(SysTick_GetTicks() < timeout && status == 0){
 8000a7c:	f000 f964 	bl	8000d48 <SysTick_GetTicks>
 8000a80:	4603      	mov	r3, r0
 8000a82:	461a      	mov	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d202      	bcs.n	8000a90 <WIFI_SendCmd+0x84>
 8000a8a:	7ffb      	ldrb	r3, [r7, #31]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d0d4      	beq.n	8000a3a <WIFI_SendCmd+0x2e>
		}
	}
	return status;
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40011000 	.word	0x40011000

08000aa0 <EXTI0_IRQHandler>:
	default:
		break;
	}
	return (result == 0);
}
void EXTI0_IRQHandler(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR0;
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <EXTI0_IRQHandler+0x1c>)
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <EXTI0_IRQHandler+0x1c>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6153      	str	r3, [r2, #20]
	handler_down();
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <EXTI0_IRQHandler+0x20>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4798      	blx	r3
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40013c00 	.word	0x40013c00
 8000ac0:	2000004c 	.word	0x2000004c

08000ac4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR1;
 8000ac8:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <EXTI1_IRQHandler+0x1c>)
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <EXTI1_IRQHandler+0x1c>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	6153      	str	r3, [r2, #20]
	handler_up();
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <EXTI1_IRQHandler+0x20>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4798      	blx	r3
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40013c00 	.word	0x40013c00
 8000ae4:	20000040 	.word	0x20000040

08000ae8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR2;
 8000aec:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <EXTI2_IRQHandler+0x1c>)
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <EXTI2_IRQHandler+0x1c>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6153      	str	r3, [r2, #20]
	handler_center();
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <EXTI2_IRQHandler+0x20>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4798      	blx	r3
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40013c00 	.word	0x40013c00
 8000b08:	20000044 	.word	0x20000044

08000b0c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR11){
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <EXTI15_10_IRQHandler+0x48>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d009      	beq.n	8000b30 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR	|=  EXTI_PR_PR11;
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <EXTI15_10_IRQHandler+0x48>)
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <EXTI15_10_IRQHandler+0x48>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b26:	6153      	str	r3, [r2, #20]
		handler_right();
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <EXTI15_10_IRQHandler+0x4c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4798      	blx	r3
	}
	else if(EXTI->PR & EXTI_PR_PR12){
		EXTI->PR	|=  EXTI_PR_PR12;
		handler_left();
	}
}
 8000b2e:	e00e      	b.n	8000b4e <EXTI15_10_IRQHandler+0x42>
	else if(EXTI->PR & EXTI_PR_PR12){
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <EXTI15_10_IRQHandler+0x48>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d008      	beq.n	8000b4e <EXTI15_10_IRQHandler+0x42>
		EXTI->PR	|=  EXTI_PR_PR12;
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <EXTI15_10_IRQHandler+0x48>)
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <EXTI15_10_IRQHandler+0x48>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b46:	6153      	str	r3, [r2, #20]
		handler_left();
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <EXTI15_10_IRQHandler+0x50>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4798      	blx	r3
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40013c00 	.word	0x40013c00
 8000b58:	20000048 	.word	0x20000048
 8000b5c:	2000003c 	.word	0x2000003c

08000b60 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <FLASH_Unlock+0x24>)
 8000b66:	691b      	ldr	r3, [r3, #16]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	da05      	bge.n	8000b78 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <FLASH_Unlock+0x24>)
 8000b6e:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <FLASH_Unlock+0x28>)
 8000b70:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <FLASH_Unlock+0x24>)
 8000b74:	4a05      	ldr	r2, [pc, #20]	; (8000b8c <FLASH_Unlock+0x2c>)
 8000b76:	605a      	str	r2, [r3, #4]
  }  
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023c00 	.word	0x40023c00
 8000b88:	45670123 	.word	0x45670123
 8000b8c:	cdef89ab 	.word	0xcdef89ab

08000b90 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8000ba0:	f000 f860 	bl	8000c64 <FLASH_WaitForLastOperation>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	2b08      	cmp	r3, #8
 8000bac:	d11c      	bne.n	8000be8 <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <FLASH_ProgramByte+0x64>)
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <FLASH_ProgramByte+0x64>)
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bb8:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <FLASH_ProgramByte+0x64>)
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <FLASH_ProgramByte+0x64>)
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8000bc2:	4a0c      	ldr	r2, [pc, #48]	; (8000bf4 <FLASH_ProgramByte+0x64>)
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <FLASH_ProgramByte+0x64>)
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6113      	str	r3, [r2, #16]
  
    *(__IO uint8_t*)Address = Data;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	78fa      	ldrb	r2, [r7, #3]
 8000bd2:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8000bd4:	f000 f846 	bl	8000c64 <FLASH_WaitForLastOperation>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8000bdc:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <FLASH_ProgramByte+0x64>)
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <FLASH_ProgramByte+0x64>)
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	f023 0301 	bic.w	r3, r3, #1
 8000be6:	6113      	str	r3, [r2, #16]
  } 

  /* Return the Program Status */
  return status;
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8000bfe:	2308      	movs	r3, #8
 8000c00:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <FLASH_GetStatus+0x68>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c0e:	d102      	bne.n	8000c16 <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY;
 8000c10:	2301      	movs	r3, #1
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	e01c      	b.n	8000c50 <FLASH_GetStatus+0x58>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <FLASH_GetStatus+0x68>)
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d002      	beq.n	8000c28 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8000c22:	2305      	movs	r3, #5
 8000c24:	71fb      	strb	r3, [r7, #7]
 8000c26:	e013      	b.n	8000c50 <FLASH_GetStatus+0x58>
    }
    else
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <FLASH_GetStatus+0x68>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <FLASH_GetStatus+0x42>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8000c34:	2306      	movs	r3, #6
 8000c36:	71fb      	strb	r3, [r7, #7]
 8000c38:	e00a      	b.n	8000c50 <FLASH_GetStatus+0x58>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <FLASH_GetStatus+0x68>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 8000c46:	2307      	movs	r3, #7
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	e001      	b.n	8000c50 <FLASH_GetStatus+0x58>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8000c6e:	f7ff ffc3 	bl	8000bf8 <FLASH_GetStatus>
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8000c76:	e003      	b.n	8000c80 <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 8000c78:	f7ff ffbe 	bl	8000bf8 <FLASH_GetStatus>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d0f7      	beq.n	8000c78 <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	b2db      	uxtb	r3, r3
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <RCC_DeInit+0x50>)
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <RCC_DeInit+0x50>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <RCC_DeInit+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8000caa:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <RCC_DeInit+0x50>)
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <RCC_DeInit+0x50>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <RCC_DeInit+0x50>)
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <RCC_DeInit+0x54>)
 8000cbe:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <RCC_DeInit+0x50>)
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <RCC_DeInit+0x58>)
 8000cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <RCC_DeInit+0x50>)
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <RCC_DeInit+0x50>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <RCC_DeInit+0x50>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	24003010 	.word	0x24003010
 8000cec:	20003000 	.word	0x20003000

08000cf0 <SysTick_Init>:
 */
#include "systick.h"

volatile static uint32_t ticks = 0;

void 		SysTick_Init(uint32_t underFlowValue){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	SysTick->CTRL |= (SysTick_CTRL_CLKSOURCE_Msk|SysTick_CTRL_ENABLE_Msk|SysTick_CTRL_TICKINT_Msk);
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <SysTick_Init+0x30>)
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <SysTick_Init+0x30>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f043 0307 	orr.w	r3, r3, #7
 8000d02:	6013      	str	r3, [r2, #0]
	SysTick->LOAD = underFlowValue - 1;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <SysTick_Init+0x30>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	6053      	str	r3, [r2, #4]
	SysTick->VAL  = SysTick->LOAD;
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <SysTick_Init+0x30>)
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SysTick_Init+0x30>)
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	6093      	str	r3, [r2, #8]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <SysTick_Restart>:
void 		SysTick_Restart(void){
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
	SysTick->VAL  = SysTick->LOAD;
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SysTick_Restart+0x1c>)
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <SysTick_Restart+0x1c>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	6093      	str	r3, [r2, #8]
	ticks = 0;
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SysTick_Restart+0x20>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e010 	.word	0xe000e010
 8000d44:	20000030 	.word	0x20000030

08000d48 <SysTick_GetTicks>:
uint32_t 	SysTick_GetTicks(void){
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	return ticks;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <SysTick_GetTicks+0x14>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000030 	.word	0x20000030

08000d60 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	ticks++;
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Handler+0x18>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a03      	ldr	r2, [pc, #12]	; (8000d78 <SysTick_Handler+0x18>)
 8000d6c:	6013      	str	r3, [r2, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	20000030 	.word	0x20000030

08000d7c <TIM1_CC_IRQHandler>:



volatile uint32_t pulse_width = 0;
static volatile uint8_t  edge_state  = 0; /* 0: Rising, 1: Falling */
void TIM1_CC_IRQHandler(void){
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	TIM1->SR &= ~TIM_SR_CC1IF;
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <TIM1_CC_IRQHandler+0x50>)
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <TIM1_CC_IRQHandler+0x50>)
 8000d84:	8a1b      	ldrh	r3, [r3, #16]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	f023 0302 	bic.w	r3, r3, #2
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	8213      	strh	r3, [r2, #16]
	if(edge_state == 0){
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <TIM1_CC_IRQHandler+0x54>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d106      	bne.n	8000da8 <TIM1_CC_IRQHandler+0x2c>
		/* Rising */
		TIM1->CNT = 0;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <TIM1_CC_IRQHandler+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24
		edge_state = 1;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <TIM1_CC_IRQHandler+0x54>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
	}else if(edge_state == 1){
		/* Falling */
		pulse_width = TIM1->CCR1;
		edge_state = 0;
	}
}
 8000da6:	e00b      	b.n	8000dc0 <TIM1_CC_IRQHandler+0x44>
	}else if(edge_state == 1){
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <TIM1_CC_IRQHandler+0x54>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d106      	bne.n	8000dc0 <TIM1_CC_IRQHandler+0x44>
		pulse_width = TIM1->CCR1;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <TIM1_CC_IRQHandler+0x50>)
 8000db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <TIM1_CC_IRQHandler+0x58>)
 8000db8:	6013      	str	r3, [r2, #0]
		edge_state = 0;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <TIM1_CC_IRQHandler+0x54>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	20000038 	.word	0x20000038
 8000dd4:	20000034 	.word	0x20000034

08000dd8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	if(TIM3->SR & TIM_SR_UIF){
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <TIM3_IRQHandler+0x2c>)
 8000dde:	8a1b      	ldrh	r3, [r3, #16]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00a      	beq.n	8000e00 <TIM3_IRQHandler+0x28>
		TIM3->SR &= ~TIM_SR_UIF;
 8000dea:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <TIM3_IRQHandler+0x2c>)
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <TIM3_IRQHandler+0x2c>)
 8000dee:	8a1b      	ldrh	r3, [r3, #16]
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	f023 0301 	bic.w	r3, r3, #1
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	8213      	strh	r3, [r2, #16]
		notifyHandle();
 8000dfa:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <TIM3_IRQHandler+0x30>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4798      	blx	r3
		//TIM3->CR1	&= ~TIM_CR1_CEN;
	}
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40000400 	.word	0x40000400
 8000e08:	20000050 	.word	0x20000050

08000e0c <Uart_Init>:
 */

#include "uart.h"

/* UART2 */
void Uart_Init(USART_TypeDef* uart, uint32_t baudrate){
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
	uint8_t frac;
	uint16_t integ;
	float UARTDIV;

	if(uart == USART2){
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4a87      	ldr	r2, [pc, #540]	; (8001038 <Uart_Init+0x22c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d13c      	bne.n	8000e98 <Uart_Init+0x8c>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOAEN;
 8000e1e:	4a87      	ldr	r2, [pc, #540]	; (800103c <Uart_Init+0x230>)
 8000e20:	4b86      	ldr	r3, [pc, #536]	; (800103c <Uart_Init+0x230>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(2*2));
 8000e2a:	4a85      	ldr	r2, [pc, #532]	; (8001040 <Uart_Init+0x234>)
 8000e2c:	4b84      	ldr	r3, [pc, #528]	; (8001040 <Uart_Init+0x234>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e34:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(3*2));
 8000e36:	4a82      	ldr	r2, [pc, #520]	; (8001040 <Uart_Init+0x234>)
 8000e38:	4b81      	ldr	r3, [pc, #516]	; (8001040 <Uart_Init+0x234>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000e40:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(2*2));
 8000e42:	4a7f      	ldr	r2, [pc, #508]	; (8001040 <Uart_Init+0x234>)
 8000e44:	4b7e      	ldr	r3, [pc, #504]	; (8001040 <Uart_Init+0x234>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(3*2));
 8000e4e:	4a7c      	ldr	r2, [pc, #496]	; (8001040 <Uart_Init+0x234>)
 8000e50:	4b7b      	ldr	r3, [pc, #492]	; (8001040 <Uart_Init+0x234>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e58:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[0]	&= ~(0xF<<(2*4));
 8000e5a:	4a79      	ldr	r2, [pc, #484]	; (8001040 <Uart_Init+0x234>)
 8000e5c:	4b78      	ldr	r3, [pc, #480]	; (8001040 <Uart_Init+0x234>)
 8000e5e:	6a1b      	ldr	r3, [r3, #32]
 8000e60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e64:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	&= ~(0xF<<(3*4));
 8000e66:	4a76      	ldr	r2, [pc, #472]	; (8001040 <Uart_Init+0x234>)
 8000e68:	4b75      	ldr	r3, [pc, #468]	; (8001040 <Uart_Init+0x234>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000e70:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x7<<(2*4));
 8000e72:	4a73      	ldr	r2, [pc, #460]	; (8001040 <Uart_Init+0x234>)
 8000e74:	4b72      	ldr	r3, [pc, #456]	; (8001040 <Uart_Init+0x234>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000e7c:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x7<<(3*4));
 8000e7e:	4a70      	ldr	r2, [pc, #448]	; (8001040 <Uart_Init+0x234>)
 8000e80:	4b6f      	ldr	r3, [pc, #444]	; (8001040 <Uart_Init+0x234>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000e88:	6213      	str	r3, [r2, #32]
		RCC->APB1ENR	|= RCC_APB1ENR_USART2EN;
 8000e8a:	4a6c      	ldr	r2, [pc, #432]	; (800103c <Uart_Init+0x230>)
 8000e8c:	4b6b      	ldr	r3, [pc, #428]	; (800103c <Uart_Init+0x230>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	e080      	b.n	8000f9a <Uart_Init+0x18e>
	}else if(uart == USART1){
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4a6a      	ldr	r2, [pc, #424]	; (8001044 <Uart_Init+0x238>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d13c      	bne.n	8000f1a <Uart_Init+0x10e>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOAEN;
 8000ea0:	4a66      	ldr	r2, [pc, #408]	; (800103c <Uart_Init+0x230>)
 8000ea2:	4b66      	ldr	r3, [pc, #408]	; (800103c <Uart_Init+0x230>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(9*2));
 8000eac:	4a64      	ldr	r2, [pc, #400]	; (8001040 <Uart_Init+0x234>)
 8000eae:	4b64      	ldr	r3, [pc, #400]	; (8001040 <Uart_Init+0x234>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000eb6:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(10*2));
 8000eb8:	4a61      	ldr	r2, [pc, #388]	; (8001040 <Uart_Init+0x234>)
 8000eba:	4b61      	ldr	r3, [pc, #388]	; (8001040 <Uart_Init+0x234>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000ec2:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(9*2));
 8000ec4:	4a5e      	ldr	r2, [pc, #376]	; (8001040 <Uart_Init+0x234>)
 8000ec6:	4b5e      	ldr	r3, [pc, #376]	; (8001040 <Uart_Init+0x234>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ece:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(10*2));
 8000ed0:	4a5b      	ldr	r2, [pc, #364]	; (8001040 <Uart_Init+0x234>)
 8000ed2:	4b5b      	ldr	r3, [pc, #364]	; (8001040 <Uart_Init+0x234>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eda:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[1]	&= ~(0xF<<(1*4));
 8000edc:	4a58      	ldr	r2, [pc, #352]	; (8001040 <Uart_Init+0x234>)
 8000ede:	4b58      	ldr	r3, [pc, #352]	; (8001040 <Uart_Init+0x234>)
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ee6:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	&= ~(0xF<<(2*4));
 8000ee8:	4a55      	ldr	r2, [pc, #340]	; (8001040 <Uart_Init+0x234>)
 8000eea:	4b55      	ldr	r3, [pc, #340]	; (8001040 <Uart_Init+0x234>)
 8000eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ef2:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	|= (0x7<<(1*4));
 8000ef4:	4a52      	ldr	r2, [pc, #328]	; (8001040 <Uart_Init+0x234>)
 8000ef6:	4b52      	ldr	r3, [pc, #328]	; (8001040 <Uart_Init+0x234>)
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000efe:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	|= (0x7<<(2*4));
 8000f00:	4a4f      	ldr	r2, [pc, #316]	; (8001040 <Uart_Init+0x234>)
 8000f02:	4b4f      	ldr	r3, [pc, #316]	; (8001040 <Uart_Init+0x234>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f0a:	6253      	str	r3, [r2, #36]	; 0x24
		RCC->APB2ENR	|= RCC_APB2ENR_USART1EN;
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <Uart_Init+0x230>)
 8000f0e:	4b4b      	ldr	r3, [pc, #300]	; (800103c <Uart_Init+0x230>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6453      	str	r3, [r2, #68]	; 0x44
 8000f18:	e03f      	b.n	8000f9a <Uart_Init+0x18e>

	}else if(uart == USART6){
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4a4a      	ldr	r2, [pc, #296]	; (8001048 <Uart_Init+0x23c>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d13b      	bne.n	8000f9a <Uart_Init+0x18e>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOCEN;
 8000f22:	4a46      	ldr	r2, [pc, #280]	; (800103c <Uart_Init+0x230>)
 8000f24:	4b45      	ldr	r3, [pc, #276]	; (800103c <Uart_Init+0x230>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(6*2));
 8000f2e:	4a44      	ldr	r2, [pc, #272]	; (8001040 <Uart_Init+0x234>)
 8000f30:	4b43      	ldr	r3, [pc, #268]	; (8001040 <Uart_Init+0x234>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f38:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(7*2));
 8000f3a:	4a41      	ldr	r2, [pc, #260]	; (8001040 <Uart_Init+0x234>)
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <Uart_Init+0x234>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f44:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(6*2));
 8000f46:	4a3e      	ldr	r2, [pc, #248]	; (8001040 <Uart_Init+0x234>)
 8000f48:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <Uart_Init+0x234>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f50:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(7*2));
 8000f52:	4a3b      	ldr	r2, [pc, #236]	; (8001040 <Uart_Init+0x234>)
 8000f54:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <Uart_Init+0x234>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f5c:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[0]	&= ~(0xF<<(6*4));
 8000f5e:	4a38      	ldr	r2, [pc, #224]	; (8001040 <Uart_Init+0x234>)
 8000f60:	4b37      	ldr	r3, [pc, #220]	; (8001040 <Uart_Init+0x234>)
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000f68:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	&= ~(0xF<<(7*4));
 8000f6a:	4a35      	ldr	r2, [pc, #212]	; (8001040 <Uart_Init+0x234>)
 8000f6c:	4b34      	ldr	r3, [pc, #208]	; (8001040 <Uart_Init+0x234>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f74:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x8<<(6*4));
 8000f76:	4a32      	ldr	r2, [pc, #200]	; (8001040 <Uart_Init+0x234>)
 8000f78:	4b31      	ldr	r3, [pc, #196]	; (8001040 <Uart_Init+0x234>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f80:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x8<<(7*4));
 8000f82:	4a2f      	ldr	r2, [pc, #188]	; (8001040 <Uart_Init+0x234>)
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <Uart_Init+0x234>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f8c:	6213      	str	r3, [r2, #32]
		RCC->APB2ENR	|= RCC_APB2ENR_USART6EN;
 8000f8e:	4a2b      	ldr	r2, [pc, #172]	; (800103c <Uart_Init+0x230>)
 8000f90:	4b2a      	ldr	r3, [pc, #168]	; (800103c <Uart_Init+0x230>)
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	f043 0320 	orr.w	r3, r3, #32
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44

	}

	UARTDIV			= (SystemCoreClock/(16.0*baudrate));
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <Uart_Init+0x240>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fa5c 	bl	800045c <__aeabi_ui2d>
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	460d      	mov	r5, r1
 8000fa8:	68b8      	ldr	r0, [r7, #8]
 8000faa:	f7ff fa57 	bl	800045c <__aeabi_ui2d>
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <Uart_Init+0x244>)
 8000fb4:	f7ff fac8 	bl	8000548 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	f7ff fbec 	bl	800079c <__aeabi_ddiv>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	4618      	mov	r0, r3
 8000fca:	4621      	mov	r1, r4
 8000fcc:	f7ff fcce 	bl	800096c <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	617b      	str	r3, [r7, #20]
	integ			= (uint16_t)UARTDIV;
 8000fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fdc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	827b      	strh	r3, [r7, #18]
	frac			= (UARTDIV-integ)*16;
 8000fe4:	8a7b      	ldrh	r3, [r7, #18]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fee:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8000ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001002:	edc7 7a01 	vstr	s15, [r7, #4]
 8001006:	793b      	ldrb	r3, [r7, #4]
 8001008:	747b      	strb	r3, [r7, #17]
	uart->BRR		=(integ<<4)+frac;
 800100a:	8a7b      	ldrh	r3, [r7, #18]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	b29a      	uxth	r2, r3
 8001010:	7c7b      	ldrb	r3, [r7, #17]
 8001012:	b29b      	uxth	r3, r3
 8001014:	4413      	add	r3, r2
 8001016:	b29a      	uxth	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	811a      	strh	r2, [r3, #8]

	uart->CR1		|=((USART_CR1_TE)|(USART_CR1_RE)|(USART_CR1_UE));
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	899b      	ldrh	r3, [r3, #12]
 8001020:	b29b      	uxth	r3, r3
 8001022:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001026:	f043 030c 	orr.w	r3, r3, #12
 800102a:	b29a      	uxth	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	819a      	strh	r2, [r3, #12]

}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}
 8001038:	40004400 	.word	0x40004400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000
 8001044:	40011000 	.word	0x40011000
 8001048:	40011400 	.word	0x40011400
 800104c:	20000000 	.word	0x20000000
 8001050:	40300000 	.word	0x40300000

08001054 <Uart_SendByte>:
void Uart_SendByte(USART_TypeDef* uart, uint8_t data){
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]
	while(!(uart->SR &USART_SR_TXE));
 8001060:	bf00      	nop
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f8      	beq.n	8001062 <Uart_SendByte+0xe>
	uart->DR 		= data;
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	809a      	strh	r2, [r3, #4]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <Uart_SendString>:
void Uart_SendString(USART_TypeDef* uart, uint8_t* str){
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
	while(str[i])
 8001092:	e00a      	b.n	80010aa <Uart_SendString+0x26>
	{
		Uart_SendByte(uart,str[i]);
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffd8 	bl	8001054 <Uart_SendByte>
		i++;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
	while(str[i])
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1ee      	bne.n	8001094 <Uart_SendString+0x10>
	}
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <Uart_ReceiveByte_Unblock>:

void Uart_ReceiveByte(USART_TypeDef* uart, uint8_t* pData){
	while(!(uart->SR &USART_SR_RXNE));
	(*pData)	=	uart->DR;
}
uint8_t Uart_ReceiveByte_Unblock(USART_TypeDef* uart, uint8_t* pData){
 80010be:	b480      	push	{r7}
 80010c0:	b085      	sub	sp, #20
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	73fb      	strb	r3, [r7, #15]
	if(uart->SR &USART_SR_RXNE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f003 0320 	and.w	r3, r3, #32
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <Uart_ReceiveByte_Unblock+0x2c>
	{
		(*pData) 	= uart->DR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	889b      	ldrh	r3, [r3, #4]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	701a      	strb	r2, [r3, #0]
		status 		= 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <delayMs>:
 *  Created on: Nov 5, 2020
 *      Author: MahmoudH
 */
#include "delay.h"

void delayMs(uint32_t delay_ms){
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	uint32_t ind1 = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
	uint32_t ind2 = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	60bb      	str	r3, [r7, #8]
	for (ind1 = 0; ind1 < delay_ms; ++ind1) {
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e00e      	b.n	800112c <delayMs+0x34>
		for (ind2 = 0; ind2 < 1250; ++ind2) {
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	e003      	b.n	800111c <delayMs+0x24>
			asm("nop");
 8001114:	bf00      	nop
		for (ind2 = 0; ind2 < 1250; ++ind2) {
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3301      	adds	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001122:	4293      	cmp	r3, r2
 8001124:	d9f6      	bls.n	8001114 <delayMs+0x1c>
	for (ind1 = 0; ind1 < delay_ms; ++ind1) {
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	d3ec      	bcc.n	800110e <delayMs+0x16>
		}
	}
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <main>:
 **  Abstract: main program
 **
 **===========================================================================
 */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
	uint8_t key = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]
	uint16_t adcValue = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	82bb      	strh	r3, [r7, #20]

	uint8_t eepromData = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	74fb      	strb	r3, [r7, #19]
	uint8_t data = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]

	/* Clock -> Internal 16 MHz */
	RCC_DeInit();				/* Adapt PLL to the internal 16 MHz RC oscillator */
 800115a:	f7ff fd9b 	bl	8000c94 <RCC_DeInit>
	SystemCoreClockUpdate();	/* Update SystemCoreClock */
 800115e:	f000 f99d 	bl	800149c <SystemCoreClockUpdate>

	SysTick_Init(SystemCoreClock/1000);
 8001162:	4b6f      	ldr	r3, [pc, #444]	; (8001320 <const1+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a6f      	ldr	r2, [pc, #444]	; (8001324 <const1+0x28>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	099b      	lsrs	r3, r3, #6
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fdbe 	bl	8000cf0 <SysTick_Init>

	Uart_Init(USART1,115200);
 8001174:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001178:	486b      	ldr	r0, [pc, #428]	; (8001328 <const1+0x2c>)
 800117a:	f7ff fe47 	bl	8000e0c <Uart_Init>
	Uart_Init(USART2,115200);
 800117e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001182:	486a      	ldr	r0, [pc, #424]	; (800132c <const1+0x30>)
 8001184:	f7ff fe42 	bl	8000e0c <Uart_Init>

	Uart_SendString(USART2,"OTA Loader started ...\n");
 8001188:	4969      	ldr	r1, [pc, #420]	; (8001330 <const1+0x34>)
 800118a:	4868      	ldr	r0, [pc, #416]	; (800132c <const1+0x30>)
 800118c:	f7ff ff7a 	bl	8001084 <Uart_SendString>
	/* Test Command */
	if(WIFI_SendCmd("AT\r\n","OK",1000)){
 8001190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001194:	4967      	ldr	r1, [pc, #412]	; (8001334 <const1+0x38>)
 8001196:	4868      	ldr	r0, [pc, #416]	; (8001338 <const1+0x3c>)
 8001198:	f7ff fc38 	bl	8000a0c <WIFI_SendCmd>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <main+0x6c>
		Uart_SendString(USART2,"WIFI is Up\n");
 80011a2:	4966      	ldr	r1, [pc, #408]	; (800133c <const1+0x40>)
 80011a4:	4861      	ldr	r0, [pc, #388]	; (800132c <const1+0x30>)
 80011a6:	f7ff ff6d 	bl	8001084 <Uart_SendString>
 80011aa:	e003      	b.n	80011b4 <main+0x74>
	}else{
		Uart_SendString(USART2,"WIFI is Down\n");
 80011ac:	4964      	ldr	r1, [pc, #400]	; (8001340 <const1+0x44>)
 80011ae:	485f      	ldr	r0, [pc, #380]	; (800132c <const1+0x30>)
 80011b0:	f7ff ff68 	bl	8001084 <Uart_SendString>
	}
	delayMs(100);
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f7ff ff9f 	bl	80010f8 <delayMs>
	/* Echo Command */
	if(WIFI_SendCmd("ATE0\r\n","OK",1000)){
 80011ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011be:	495d      	ldr	r1, [pc, #372]	; (8001334 <const1+0x38>)
 80011c0:	4860      	ldr	r0, [pc, #384]	; (8001344 <const1+0x48>)
 80011c2:	f7ff fc23 	bl	8000a0c <WIFI_SendCmd>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <main+0x96>
		Uart_SendString(USART2,"Echo Disabled\n");
 80011cc:	495e      	ldr	r1, [pc, #376]	; (8001348 <const1+0x4c>)
 80011ce:	4857      	ldr	r0, [pc, #348]	; (800132c <const1+0x30>)
 80011d0:	f7ff ff58 	bl	8001084 <Uart_SendString>
 80011d4:	e003      	b.n	80011de <main+0x9e>
	}else{
		Uart_SendString(USART2,"Echo not Disabled\n");
 80011d6:	495d      	ldr	r1, [pc, #372]	; (800134c <const1+0x50>)
 80011d8:	4854      	ldr	r0, [pc, #336]	; (800132c <const1+0x30>)
 80011da:	f7ff ff53 	bl	8001084 <Uart_SendString>
	}
	delayMs(100);
 80011de:	2064      	movs	r0, #100	; 0x64
 80011e0:	f7ff ff8a 	bl	80010f8 <delayMs>
	/* Station Mode Command */
	if(WIFI_SendCmd("AT+CWMODE=1\r\n","OK",1000)){
 80011e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011e8:	4952      	ldr	r1, [pc, #328]	; (8001334 <const1+0x38>)
 80011ea:	4859      	ldr	r0, [pc, #356]	; (8001350 <const1+0x54>)
 80011ec:	f7ff fc0e 	bl	8000a0c <WIFI_SendCmd>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <main+0xc0>
		Uart_SendString(USART2,"Station Mode Done\n");
 80011f6:	4957      	ldr	r1, [pc, #348]	; (8001354 <const1+0x58>)
 80011f8:	484c      	ldr	r0, [pc, #304]	; (800132c <const1+0x30>)
 80011fa:	f7ff ff43 	bl	8001084 <Uart_SendString>
 80011fe:	e003      	b.n	8001208 <main+0xc8>
	}else{
		Uart_SendString(USART2,"Station Mode ERROR\n");
 8001200:	4955      	ldr	r1, [pc, #340]	; (8001358 <const1+0x5c>)
 8001202:	484a      	ldr	r0, [pc, #296]	; (800132c <const1+0x30>)
 8001204:	f7ff ff3e 	bl	8001084 <Uart_SendString>
	}
	delayMs(100);
 8001208:	2064      	movs	r0, #100	; 0x64
 800120a:	f7ff ff75 	bl	80010f8 <delayMs>
	/* WI-FI Network Connection */
	if(WIFI_SendCmd("AT+CWJAP=\"wagnat_plus\",\"wagnat111\"\r\n","OK",10000)){
 800120e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001212:	4948      	ldr	r1, [pc, #288]	; (8001334 <const1+0x38>)
 8001214:	4851      	ldr	r0, [pc, #324]	; (800135c <const1+0x60>)
 8001216:	f7ff fbf9 	bl	8000a0c <WIFI_SendCmd>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <main+0xea>
		Uart_SendString(USART2,"Network Connected\n");
 8001220:	494f      	ldr	r1, [pc, #316]	; (8001360 <const1+0x64>)
 8001222:	4842      	ldr	r0, [pc, #264]	; (800132c <const1+0x30>)
 8001224:	f7ff ff2e 	bl	8001084 <Uart_SendString>
 8001228:	e003      	b.n	8001232 <main+0xf2>
	}else{
		Uart_SendString(USART2,"Network ERROR\n");
 800122a:	494e      	ldr	r1, [pc, #312]	; (8001364 <const1+0x68>)
 800122c:	483f      	ldr	r0, [pc, #252]	; (800132c <const1+0x30>)
 800122e:	f7ff ff29 	bl	8001084 <Uart_SendString>
	}
	delayMs(100);
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f7ff ff60 	bl	80010f8 <delayMs>
	/* TCP Connection */
	if(WIFI_SendCmd("AT+CIPSTART=\"TCP\",\"192.168.1.10\",3000\r\n","OK",10000)){
 8001238:	f242 7210 	movw	r2, #10000	; 0x2710
 800123c:	493d      	ldr	r1, [pc, #244]	; (8001334 <const1+0x38>)
 800123e:	484a      	ldr	r0, [pc, #296]	; (8001368 <const1+0x6c>)
 8001240:	f7ff fbe4 	bl	8000a0c <WIFI_SendCmd>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <main+0x114>
		Uart_SendString(USART2,"TCP Connected\n");
 800124a:	4948      	ldr	r1, [pc, #288]	; (800136c <const1+0x70>)
 800124c:	4837      	ldr	r0, [pc, #220]	; (800132c <const1+0x30>)
 800124e:	f7ff ff19 	bl	8001084 <Uart_SendString>
 8001252:	e003      	b.n	800125c <main+0x11c>
	}else{
		Uart_SendString(USART2,"TCP ERROR\n");
 8001254:	4946      	ldr	r1, [pc, #280]	; (8001370 <const1+0x74>)
 8001256:	4835      	ldr	r0, [pc, #212]	; (800132c <const1+0x30>)
 8001258:	f7ff ff14 	bl	8001084 <Uart_SendString>
	}
	delayMs(100);
 800125c:	2064      	movs	r0, #100	; 0x64
 800125e:	f7ff ff4b 	bl	80010f8 <delayMs>
	/* Send Command for HTTP*/
	if(WIFI_SendCmd("AT+CIPSEND=35\r\n","OK",1000)){
 8001262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001266:	4933      	ldr	r1, [pc, #204]	; (8001334 <const1+0x38>)
 8001268:	4842      	ldr	r0, [pc, #264]	; (8001374 <const1+0x78>)
 800126a:	f7ff fbcf 	bl	8000a0c <WIFI_SendCmd>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d04f      	beq.n	8001314 <const1+0x18>
		//FLASH_MainSectorInit();
		delayMs(10);
 8001274:	200a      	movs	r0, #10
 8001276:	f7ff ff3f 	bl	80010f8 <delayMs>
		Uart_SendString(USART1,"GET /download/firm.bin HTTP/1.1\r\n\r\n");
 800127a:	493f      	ldr	r1, [pc, #252]	; (8001378 <const1+0x7c>)
 800127c:	482a      	ldr	r0, [pc, #168]	; (8001328 <const1+0x2c>)
 800127e:	f7ff ff01 	bl	8001084 <Uart_SendString>
		/* We are receiving a file */
		FLASH_Unlock();
 8001282:	f7ff fc6d 	bl	8000b60 <FLASH_Unlock>

		uint8_t lines = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	77fb      	strb	r3, [r7, #31]
		while(1){
			if(Uart_ReceiveByte_Unblock(USART1,&data)){
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	4619      	mov	r1, r3
 800128e:	4826      	ldr	r0, [pc, #152]	; (8001328 <const1+0x2c>)
 8001290:	f7ff ff15 	bl	80010be <Uart_ReceiveByte_Unblock>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f7      	beq.n	800128a <main+0x14a>
				if(data == '\n'){
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b0a      	cmp	r3, #10
 800129e:	d1f4      	bne.n	800128a <main+0x14a>
					lines++;
 80012a0:	7ffb      	ldrb	r3, [r7, #31]
 80012a2:	3301      	adds	r3, #1
 80012a4:	77fb      	strb	r3, [r7, #31]
					if(lines == 12){
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	2b0c      	cmp	r3, #12
 80012aa:	d000      	beq.n	80012ae <main+0x16e>
			if(Uart_ReceiveByte_Unblock(USART1,&data)){
 80012ac:	e7ed      	b.n	800128a <main+0x14a>
						break;
 80012ae:	bf00      	nop
			if(Uart_ReceiveByte_Unblock(USART1,&data)){
				Uart_SendByte(USART2,data);
			}
		}*/
		/* File starts */
		uint32_t bytes = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
		while(1){
			if(Uart_ReceiveByte_Unblock(USART1,&data)){
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	4619      	mov	r1, r3
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <const1+0x2c>)
 80012ba:	f7ff ff00 	bl	80010be <Uart_ReceiveByte_Unblock>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f7      	beq.n	80012b4 <main+0x174>
				FLASH_ProgramByte((0x08060000 + bytes), data);
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80012ca:	f503 23c0 	add.w	r3, r3, #393216	; 0x60000
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fc5c 	bl	8000b90 <FLASH_ProgramByte>
				bytes++;
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	3301      	adds	r3, #1
 80012dc:	61bb      	str	r3, [r7, #24]
				if(bytes == 1276){
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	f240 42fc 	movw	r2, #1276	; 0x4fc
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d1e5      	bne.n	80012b4 <main+0x174>
					Uart_SendByte(USART2,data);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	4619      	mov	r1, r3
 80012ec:	480f      	ldr	r0, [pc, #60]	; (800132c <const1+0x30>)
 80012ee:	f7ff feb1 	bl	8001054 <Uart_SendByte>
					Uart_SendString(USART2,"Binary received\n");
 80012f2:	4922      	ldr	r1, [pc, #136]	; (800137c <const1+0x80>)
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <const1+0x30>)
 80012f6:	f7ff fec5 	bl	8001084 <Uart_SendString>
					break;
 80012fa:	bf00      	nop

080012fc <const1>:
 80012fc:	08060004 	.word	0x08060004
		//typedef void (*PFUN)(void);
		//volatile uint32_t* fAddr = (*((volatile uint32_t*)0x08060004));
		//pf = (PFUN)fAddr;
		asm("const1: .word 0x08060004");

		__set_MSP((*((volatile uint32_t*)0x08060000)));
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <const1+0x84>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60bb      	str	r3, [r7, #8]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) );
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f383 8808 	msr	MSP, r3
		//pf();
			asm(" ldr r0, =const1 ");
 800130c:	481e      	ldr	r0, [pc, #120]	; (8001388 <const1+0x8c>)
			asm(" ldr pc, [r0] ");
 800130e:	f8d0 f000 	ldr.w	pc, [r0]
 8001312:	e003      	b.n	800131c <const1+0x20>

		//asm("bx 0x");

	}else{
		Uart_SendString(USART2,"Send ERROR\n");
 8001314:	491b      	ldr	r1, [pc, #108]	; (8001384 <const1+0x88>)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <const1+0x30>)
 8001318:	f7ff feb4 	bl	8001084 <Uart_SendString>
	}


	while(1);
 800131c:	e7fe      	b.n	800131c <const1+0x20>
 800131e:	bf00      	nop
 8001320:	20000000 	.word	0x20000000
 8001324:	10624dd3 	.word	0x10624dd3
 8001328:	40011000 	.word	0x40011000
 800132c:	40004400 	.word	0x40004400
 8001330:	080016ec 	.word	0x080016ec
 8001334:	08001704 	.word	0x08001704
 8001338:	08001708 	.word	0x08001708
 800133c:	08001710 	.word	0x08001710
 8001340:	0800171c 	.word	0x0800171c
 8001344:	0800172c 	.word	0x0800172c
 8001348:	08001734 	.word	0x08001734
 800134c:	08001744 	.word	0x08001744
 8001350:	08001758 	.word	0x08001758
 8001354:	08001768 	.word	0x08001768
 8001358:	0800177c 	.word	0x0800177c
 800135c:	08001790 	.word	0x08001790
 8001360:	080017b8 	.word	0x080017b8
 8001364:	080017cc 	.word	0x080017cc
 8001368:	080017dc 	.word	0x080017dc
 800136c:	08001804 	.word	0x08001804
 8001370:	08001814 	.word	0x08001814
 8001374:	08001820 	.word	0x08001820
 8001378:	08001830 	.word	0x08001830
 800137c:	08001854 	.word	0x08001854
 8001380:	08060000 	.word	0x08060000
 8001384:	08001868 	.word	0x08001868
 8001388:	080012fc 	.word	0x080012fc

0800138c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800138c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001390:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001392:	e003      	b.n	800139c <LoopCopyDataInit>

08001394 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001396:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001398:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800139a:	3104      	adds	r1, #4

0800139c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800139c:	480b      	ldr	r0, [pc, #44]	; (80013cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013a4:	d3f6      	bcc.n	8001394 <CopyDataInit>
  ldr  r2, =_sbss
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013a8:	e002      	b.n	80013b0 <LoopFillZerobss>

080013aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013ac:	f842 3b04 	str.w	r3, [r2], #4

080013b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013b4:	d3f9      	bcc.n	80013aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013b6:	f000 f83b 	bl	8001430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ba:	f000 f967 	bl	800168c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013be:	f7ff febf 	bl	8001140 <main>
  bx  lr    
 80013c2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013c4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80013c8:	0800187c 	.word	0x0800187c
  ldr  r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013d0:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80013d4:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80013d8:	20000054 	.word	0x20000054

080013dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC_IRQHandler>

080013de <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <HardFault_Handler+0x4>

080013f2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <MemManage_Handler+0x4>

080013f8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <BusFault_Handler+0x4>

080013fe <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001402:	e7fe      	b.n	8001402 <UsageFault_Handler+0x4>

08001404 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4a16      	ldr	r2, [pc, #88]	; (8001490 <SystemInit+0x60>)
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <SystemInit+0x60>)
 8001438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <SystemInit+0x64>)
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <SystemInit+0x64>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <SystemInit+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <SystemInit+0x64>)
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <SystemInit+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <SystemInit+0x64>)
 8001468:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <SystemInit+0x68>)
 800146a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800146c:	4a09      	ldr	r2, [pc, #36]	; (8001494 <SystemInit+0x64>)
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <SystemInit+0x64>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001476:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <SystemInit+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800147e:	f000 f889 	bl	8001594 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001482:	4b03      	ldr	r3, [pc, #12]	; (8001490 <SystemInit+0x60>)
 8001484:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001488:	609a      	str	r2, [r3, #8]
#endif
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00
 8001494:	40023800 	.word	0x40023800
 8001498:	24003010 	.word	0x24003010

0800149c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b087      	sub	sp, #28
 80014a0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	2302      	movs	r3, #2
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	2302      	movs	r3, #2
 80014b4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <SystemCoreClockUpdate+0xe4>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d007      	beq.n	80014d6 <SystemCoreClockUpdate+0x3a>
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d009      	beq.n	80014de <SystemCoreClockUpdate+0x42>
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d13d      	bne.n	800154a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <SystemCoreClockUpdate+0xe8>)
 80014d0:	4a2d      	ldr	r2, [pc, #180]	; (8001588 <SystemCoreClockUpdate+0xec>)
 80014d2:	601a      	str	r2, [r3, #0]
      break;
 80014d4:	e03d      	b.n	8001552 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <SystemCoreClockUpdate+0xe8>)
 80014d8:	4a2c      	ldr	r2, [pc, #176]	; (800158c <SystemCoreClockUpdate+0xf0>)
 80014da:	601a      	str	r2, [r3, #0]
      break;
 80014dc:	e039      	b.n	8001552 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <SystemCoreClockUpdate+0xe4>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	0d9b      	lsrs	r3, r3, #22
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <SystemCoreClockUpdate+0xe4>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00c      	beq.n	8001514 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80014fa:	4a24      	ldr	r2, [pc, #144]	; (800158c <SystemCoreClockUpdate+0xf0>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <SystemCoreClockUpdate+0xe4>)
 8001504:	6852      	ldr	r2, [r2, #4]
 8001506:	0992      	lsrs	r2, r2, #6
 8001508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e00b      	b.n	800152c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001514:	4a1c      	ldr	r2, [pc, #112]	; (8001588 <SystemCoreClockUpdate+0xec>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	fbb2 f3f3 	udiv	r3, r2, r3
 800151c:	4a18      	ldr	r2, [pc, #96]	; (8001580 <SystemCoreClockUpdate+0xe4>)
 800151e:	6852      	ldr	r2, [r2, #4]
 8001520:	0992      	lsrs	r2, r2, #6
 8001522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001526:	fb02 f303 	mul.w	r3, r2, r3
 800152a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <SystemCoreClockUpdate+0xe4>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	0c1b      	lsrs	r3, r3, #16
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	3301      	adds	r3, #1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	fbb2 f3f3 	udiv	r3, r2, r3
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <SystemCoreClockUpdate+0xe8>)
 8001546:	6013      	str	r3, [r2, #0]
      break;
 8001548:	e003      	b.n	8001552 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <SystemCoreClockUpdate+0xe8>)
 800154c:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <SystemCoreClockUpdate+0xec>)
 800154e:	601a      	str	r2, [r3, #0]
      break;
 8001550:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <SystemCoreClockUpdate+0xe4>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	091b      	lsrs	r3, r3, #4
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <SystemCoreClockUpdate+0xf4>)
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <SystemCoreClockUpdate+0xe8>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <SystemCoreClockUpdate+0xe8>)
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	bf00      	nop
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	20000000 	.word	0x20000000
 8001588:	00f42400 	.word	0x00f42400
 800158c:	017d7840 	.word	0x017d7840
 8001590:	20000004 	.word	0x20000004

08001594 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80015a2:	4a36      	ldr	r2, [pc, #216]	; (800167c <SetSysClock+0xe8>)
 80015a4:	4b35      	ldr	r3, [pc, #212]	; (800167c <SetSysClock+0xe8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <SetSysClock+0xe8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3301      	adds	r3, #1
 80015bc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d103      	bne.n	80015cc <SetSysClock+0x38>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80015ca:	d1f0      	bne.n	80015ae <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <SetSysClock+0xe8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80015d8:	2301      	movs	r3, #1
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	e001      	b.n	80015e2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d142      	bne.n	800166e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80015e8:	4a24      	ldr	r2, [pc, #144]	; (800167c <SetSysClock+0xe8>)
 80015ea:	4b24      	ldr	r3, [pc, #144]	; (800167c <SetSysClock+0xe8>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80015f4:	4a22      	ldr	r2, [pc, #136]	; (8001680 <SetSysClock+0xec>)
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <SetSysClock+0xec>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015fe:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <SetSysClock+0xe8>)
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <SetSysClock+0xe8>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001608:	4a1c      	ldr	r2, [pc, #112]	; (800167c <SetSysClock+0xe8>)
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <SetSysClock+0xe8>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001612:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <SetSysClock+0xe8>)
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <SetSysClock+0xe8>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800161e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <SetSysClock+0xe8>)
 8001622:	4a18      	ldr	r2, [pc, #96]	; (8001684 <SetSysClock+0xf0>)
 8001624:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001626:	4a15      	ldr	r2, [pc, #84]	; (800167c <SetSysClock+0xe8>)
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <SetSysClock+0xe8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001630:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001632:	bf00      	nop
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <SetSysClock+0xe8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f9      	beq.n	8001634 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <SetSysClock+0xf4>)
 8001642:	f240 7205 	movw	r2, #1797	; 0x705
 8001646:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001648:	4a0c      	ldr	r2, [pc, #48]	; (800167c <SetSysClock+0xe8>)
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <SetSysClock+0xe8>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f023 0303 	bic.w	r3, r3, #3
 8001652:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001654:	4a09      	ldr	r2, [pc, #36]	; (800167c <SetSysClock+0xe8>)
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <SetSysClock+0xe8>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001660:	bf00      	nop
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <SetSysClock+0xe8>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d1f9      	bne.n	8001662 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	40007000 	.word	0x40007000
 8001684:	07405419 	.word	0x07405419
 8001688:	40023c00 	.word	0x40023c00

0800168c <__libc_init_array>:
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	4e0d      	ldr	r6, [pc, #52]	; (80016c4 <__libc_init_array+0x38>)
 8001690:	4c0d      	ldr	r4, [pc, #52]	; (80016c8 <__libc_init_array+0x3c>)
 8001692:	1ba4      	subs	r4, r4, r6
 8001694:	10a4      	asrs	r4, r4, #2
 8001696:	2500      	movs	r5, #0
 8001698:	42a5      	cmp	r5, r4
 800169a:	d109      	bne.n	80016b0 <__libc_init_array+0x24>
 800169c:	4e0b      	ldr	r6, [pc, #44]	; (80016cc <__libc_init_array+0x40>)
 800169e:	4c0c      	ldr	r4, [pc, #48]	; (80016d0 <__libc_init_array+0x44>)
 80016a0:	f000 f818 	bl	80016d4 <_init>
 80016a4:	1ba4      	subs	r4, r4, r6
 80016a6:	10a4      	asrs	r4, r4, #2
 80016a8:	2500      	movs	r5, #0
 80016aa:	42a5      	cmp	r5, r4
 80016ac:	d105      	bne.n	80016ba <__libc_init_array+0x2e>
 80016ae:	bd70      	pop	{r4, r5, r6, pc}
 80016b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016b4:	4798      	blx	r3
 80016b6:	3501      	adds	r5, #1
 80016b8:	e7ee      	b.n	8001698 <__libc_init_array+0xc>
 80016ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016be:	4798      	blx	r3
 80016c0:	3501      	adds	r5, #1
 80016c2:	e7f2      	b.n	80016aa <__libc_init_array+0x1e>
 80016c4:	08001874 	.word	0x08001874
 80016c8:	08001874 	.word	0x08001874
 80016cc:	08001874 	.word	0x08001874
 80016d0:	08001878 	.word	0x08001878

080016d4 <_init>:
 80016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d6:	bf00      	nop
 80016d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016da:	bc08      	pop	{r3}
 80016dc:	469e      	mov	lr, r3
 80016de:	4770      	bx	lr

080016e0 <_fini>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	bf00      	nop
 80016e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e6:	bc08      	pop	{r3}
 80016e8:	469e      	mov	lr, r3
 80016ea:	4770      	bx	lr
